
SET lc_time = 'fr_FR.UTF-8';

drop view if exists vw_encounters_participants;
drop view if exists vw_collectives_subscribers;
drop view if exists vw_collectives_referents;

drop table if exists bots;
drop table if exists events_lineups;
drop table if exists lineups_subscribers;
drop table if exists collectives_referents;
drop table if exists collectives_subscribers;
drop table if exists lineups;
drop table if exists events_volunteers;
drop table if exists encounters_participants;
drop table if exists encounters_absents;
drop table if exists encounters;
drop table if exists events_lineups;
drop table if exists events_volunteers;
drop table if exists events;
drop table if exists volunteers;
drop table if exists collectives;
drop table if exists members;
drop table if exists locations;

drop type if exists played_instrument;
drop type if exists music_genre; 
drop type if exists provenance; 
drop type if exists publication_status; 
drop type if exists encounter_type; 
drop type if exists encounter_status; 
drop type if exists event_status; 
drop type if exists zap_role; 
drop type if exists participant_type;
drop type if exists location_type;
drop type if exists volunteer_type;
drop type if exists community;
drop type if exists event_type;

CREATE TYPE "played_instrument" AS ENUM (
  'All',
  'Accordion',
  'Bass',
  'Drums',
  'Cajon',
  'Voice',
  'Clarinet',
  'Keyboard',
  'DoubleBass',
  'DrumMachine',
  'Flute',
  'Guitar',
  'Harmonica',
  'CAM',
  'Percussion',
  'Piano',
  'Saxophone',
  'Trombone',
  'Trumpet',
  'Violin',
  'Harp',
  'Cello',
  'OtherStringedInstruments',
  'OtherWoodwindInstruments'
);

CREATE TYPE "music_genre" AS ENUM (
  'Blues',
  'FrenchSong',
  'Country',
  'Disco',
  'Folk',
  'Funk',
  'Fusion',
  'Grunge',
  'HardRock',
  'Instrumental',
  'Jazz',
  'Latin',
  'Metal',
  'Pop',
  'Punk',
  'RnB',
  'Rock',
  'Soul',
  'World',
  'Reggae',
  'Afrobeat',
  'Brasilian',
  'HipHop',
  'Trad',
  'Chamber'
);

CREATE TYPE "encounter_type" AS ENUM (
  'RehearsalJam',
  'StreetJam',
  'DistantJam',
  'Concert',
  'OutJam',
  'Karaoke',
  'EventJam',
  'Informal'
);

CREATE TYPE "publication_status" AS ENUM (
  'ToBeChecked',
  'Confirmed',
  'Archived'
);

CREATE TYPE "encounter_status" AS ENUM (
  'Realised',
  'Cancelled',
  'OnDemandeRegistration',
  'OpenRegistration',
  'ClosedRegistration'
);

CREATE TYPE "event_status" AS ENUM (
  'Realised',
  'Cancelled',
  'ToBook',
  'Booked',
  'BookedAndConfirmed'
);

CREATE TYPE "zap_role" AS ENUM (
  'recensement_3',
  'mbr_asso',
  'mbr_asso_actif',
  'mbr_asso_bienfaiteur',
  'referent',
  'leader'
);

CREATE TYPE "participant_type" AS ENUM (
  'Available',
  'IfNeeded',
  'NotAvailable'
);

CREATE TYPE "provenance" AS ENUM (
  'basetorius',
  'easyzic',
  'flyers',
  'zikinf',
  'words_of_mouth',
  'search_engine',
  'social_network',
  'youtube',
  'other'
);

CREATE TYPE "location_type" AS ENUM (
  'Cafe',
  'CafeConcert',
  'RehearsalStudio',
  'ConcertHall',
  'MeetingHall',
  'Restaurant',
  'Karaoke',
  'PrivateLocation'
);

CREATE TYPE "volunteer_type" AS ENUM (
  'Photograph',
  'Videographer',
  'ComputerScience',
  'Illustrator',
  'Designer'
);

CREATE TYPE "community" AS ENUM (
  'interbeg',
  'interadv'
);

CREATE TYPE "event_type" AS ENUM (
  'Concert',
  'OpenMic',
  'JamSession'
); 

CREATE TABLE "members" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "first_name" varchar NOT NULL,
  "last_name" varchar NOT NULL,
  "email" varchar UNIQUE NOT NULL,
  "ref_airtable" varchar,
  "nick_name" varchar,
  "birth_date" date NOT NULL,
  "discord_user_id" bigint,
  "discord_nick_name" varchar(64) NOT NULL,
  "phone_number" varchar,
  "postal_code" integer,
  "address" text,
  "presentation" text NOT NULL,
  "remarks" text,
  "played_instruments" played_instrument ARRAY,
  "music_genres" music_genre ARRAY,
  "encounter_types" encounter_type ARRAY,
  "roles" zap_role ARRAY,
  "provenance" provenance NOT NULL,  
  "audio_diffusion" bool ,
  "video_diffusion" bool ,
  "newsletter" bool ,
  "communities" community ARRAY NOT NULL,
  "status" publication_status NOT NULL,
  "created_at" timestampTZ NOT NULL,
  "updated_at" timestampTZ NOT NULL
);

CREATE TABLE "volunteers" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "first_name" varchar NOT NULL,
  "last_name" varchar NOT NULL,
  "nick_name" varchar,
  "gallery_url" varchar,
  "volunteer_types" volunteer_type ARRAY NOT NULL,
  "notes" text,
  "status" publication_status NOT NULL,
  "created_at" timestampTZ NOT NULL,
  "updated_at" timestampTZ NOT NULL
);

CREATE TABLE "encounters" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "organizer_id" integer NOT NULL,
  "ref_airtable" varchar,
  "short_title" varchar(12) NOT NULL,
  "long_title" varchar(255) NOT NULL,
  "presentation" text NOT NULL,
  "notes" text,
  "played_instruments" played_instrument ARRAY,
  "music_genres" music_genre ARRAY,
  "encounter_type" encounter_type NOT NULL,
  "discord_url_message" varchar,
  "discord_message_id" bigint,
  "discord_thread_id" bigint,
  "discord_channel_id" bigint,
  "communities" community ARRAY NOT NULL,
  "location_id" integer,
  "collective_id" integer,
  "status" encounter_status NOT NULL,
  "start_date" timestampTZ NOT NULL,
  "end_date" timestampTZ NOT NULL,
  "reminder_done_14days_bef" boolean,
  "reminder_done_7days_bef" boolean,
  "reminder_done_2hours_bef" boolean,
  "registration_until_last_time" boolean,
  "created_at" timestampTZ NOT NULL,
  "updated_at" timestampTZ NOT NULL
);

CREATE TABLE "events" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "ref_airtable" varchar,
  "organizer_id" integer NOT NULL,
  "title" varchar(645) NOT NULL,
  "presentation" text NOT NULL,
  "music_genres" music_genre ARRAY,
  "event_types" event_type ARRAY NOT NULL,
  "status" event_status NOT NULL,
  "location_id" integer,
  "start-date" timestampTZ NOT NULL,
  "mobilizon_url" varchar,
  "facebook_url" varchar,
  "created_at" timestampTZ NOT NULL,
  "updated_at" timestampTZ NOT NULL
);

CREATE TABLE "locations" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "ref_airtable" varchar,
  "short_title" varchar(15) NOT NULL,
  "long_title" varchar(64) NOT NULL,
  "email" varchar,
  "phone_number" varchar,
  "address" text NOT NULL,
  "postal_code" integer NOT NULL,
  "google_maps_url" varchar NOT NULL,
  "latitude" decimal,
  "longitude" decimal,
  "notes" text,
  "status" publication_status NOT NULL,
  "location_types" location_type ARRAY NOT NULL,
  "created_at" timestampTZ NOT NULL
);

CREATE TABLE "lineups" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "ref_airtable" varchar,
  "collective_id" integer,
  "music_genres" music_genre ARRAY,
  "short_title" varchar(15) NOT NULL,
  "long_title" varchar(64) NOT NULL,
  "catch_phrase" varchar NOT NULL,
  "presentation" text NOT NULL,
  "status" publication_status NOT NULL,
  "created_at" timestampTZ NOT NULL,
  "updated_at" timestampTZ NOT NULL
);

CREATE TABLE "lineups_subscribers" (
  "lineup_id" integer,
  "subscriber_id" integer,
  "created_at" timestampTZ NOT NULL,
  PRIMARY KEY ("lineup_id", "subscriber_id")
);

CREATE TABLE "events_volunteers" (
  "event_id" integer,
  "volunteer_id" integer,
  "volunteer_type" integer NOT NULL,
  "created_at" timestampTZ NOT NULL,
  PRIMARY KEY ("event_id", "volunteer_id")
);

CREATE TABLE "encounters_participants" (
  "encounter_id" integer,
  "participant_id" integer,
  "participant_type" participant_type NOT NULL,
  "created_at" timestampTZ NOT NULL,
  PRIMARY KEY ("encounter_id", "participant_id")
);

CREATE TABLE "encounters_absents" (
  "encounter_id" integer,
  "absent_id" integer,
  "created_at" timestampTZ NOT NULL,
  PRIMARY KEY ("encounter_id", "absent_id")
);

CREATE TABLE "collectives" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "ref_airtable" varchar,
  "organizer_id" integer NOT NULL,
  "short_title" varchar(12) NOT NULL,
  "long_title" varchar(64) NOT NULL,
  "presentation" text NOT NULL,
  "notes" text,
  "discord_role_id"  bigint,
  "discord_channel_id" bigint,
  "discord_presentation_url" varchar,
  "communities" community ARRAY NOT NULL,
  "status" publication_status NOT NULL,
  "created_at" timestampTZ NOT NULL,
  "updated_at" timestampTZ NOT NULL
);

CREATE TABLE "collectives_referents" (
  "collective_id" integer,
  "referent_id" integer,
  "created_at" timestampTZ NOT NULL,
  PRIMARY KEY ("collective_id", "referent_id")
);

CREATE TABLE "collectives_subscribers" (
  "collective_id" integer,
  "subscriber_id" integer,
  "created_at" timestampTZ NOT NULL,
  PRIMARY KEY ("collective_id", "subscriber_id")
);

CREATE TABLE "bots" (
  "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "short_title" varchar(12) NOT NULL,
  "description" text NOT NULL,
  "created_at" timestampTZ NOT NULL,
  "updated_at" timestampTZ NOT NULL
);

CREATE TABLE "events_lineups" (
  "event_id" integer,
  "lineup_id" integer,
  "created_at" timestampTZ NOT NULL,
  PRIMARY KEY ("event_id", "lineup_id")
);


ALTER TABLE "encounters" ADD FOREIGN KEY ("organizer_id") REFERENCES "members" ("id");

ALTER TABLE "encounters" ADD FOREIGN KEY ("location_id") REFERENCES "locations" ("id");

ALTER TABLE "encounters" ADD FOREIGN KEY ("collective_id") REFERENCES "collectives" ("id");

ALTER TABLE "events" ADD FOREIGN KEY ("organizer_id") REFERENCES "members" ("id");

ALTER TABLE "events" ADD FOREIGN KEY ("location_id") REFERENCES "locations" ("id");

ALTER TABLE "encounters_participants" ADD FOREIGN KEY ("participant_id") REFERENCES "members" ("id");

ALTER TABLE "encounters_participants" ADD FOREIGN KEY ("encounter_id") REFERENCES "encounters" ("id");

ALTER TABLE "collectives" ADD FOREIGN KEY ("organizer_id") REFERENCES "members" ("id");

ALTER TABLE "collectives_subscribers" ADD FOREIGN KEY ("collective_id") REFERENCES "collectives" ("id");

ALTER TABLE "collectives_subscribers" ADD FOREIGN KEY ("subscriber_id") REFERENCES "members" ("id");

ALTER TABLE "events_volunteers" ADD FOREIGN KEY ("event_id") REFERENCES "events" ("id");

ALTER TABLE "events_volunteers" ADD FOREIGN KEY ("volunteer_id") REFERENCES "volunteers" ("id");

ALTER TABLE "events_lineups" ADD FOREIGN KEY ("event_id") REFERENCES "events" ("id");

ALTER TABLE "events_lineups" ADD FOREIGN KEY ("lineup_id") REFERENCES "lineups" ("id");

ALTER TABLE "lineups" ADD FOREIGN KEY ("collective_id") REFERENCES "collectives" ("id");

ALTER TABLE "lineups_subscribers" ADD FOREIGN KEY ("lineup_id") REFERENCES "lineups" ("id");

ALTER TABLE "lineups_subscribers" ADD FOREIGN KEY ("subscriber_id") REFERENCES "members" ("id");

CREATE OR REPLACE VIEW vw_encounters_participants 
AS SELECT 
	TO_CHAR(e.start_date AT TIME ZONE 'Europe/Paris', 'YYYY-MM-DD HH24:MI FMDy'), 
	e.short_title, 
  m.nick_name, 
  ep.participant_type, 
  e.long_title 
FROM members as m, encounters as e, encounters_participants as ep 
WHERE 
	m.id = ep.participant_id 
  and e.id = ep.encounter_id 
ORDER BY e.start_date DESC, m.nick_name ASC;

CREATE OR REPLACE VIEW vw_collectives_subscribers 
AS SELECT 
	c.short_title, 
  m.nick_name, 
  c.long_title 
FROM members as m, collectives as c, collectives_subscribers as cs 
WHERE 
	m.id = cs.subscriber_id 
  and c.id = cs.collective_id
  and c.status = 'Confirmed'
ORDER BY c.short_title, m.nick_name ASC;








