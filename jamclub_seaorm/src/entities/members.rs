//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::Community;
use super::sea_orm_active_enums::EncounterType;
use super::sea_orm_active_enums::MusicGenre;
use super::sea_orm_active_enums::PlayedInstrument;
use super::sea_orm_active_enums::Provenance;
use super::sea_orm_active_enums::PublicationStatus;
use super::sea_orm_active_enums::ZapRole;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "members")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub first_name: String,
    pub last_name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub ref_airtable: Option<String>,
    pub nick_name: Option<String>,
    pub birth_date: Date,
    pub discord_user_id: Option<i64>,
    pub discord_nick_name: String,
    pub phone_number: Option<String>,
    pub postal_code: Option<i32>,
    #[sea_orm(column_type = "Text", nullable)]
    pub address: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub presentation: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub remarks: Option<String>,
    pub played_instruments: Option<Vec<PlayedInstrument>>,
    pub music_genres: Option<Vec<MusicGenre>>,
    pub encounter_types: Option<Vec<EncounterType>>,
    pub roles: Option<Vec<ZapRole>>,
    pub provenance: Provenance,
    pub audio_diffusion: Option<bool>,
    pub video_diffusion: Option<bool>,
    pub newsletter: Option<bool>,
    pub communities: Vec<Community>,
    pub status: PublicationStatus,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::collectives::Entity")]
    Collectives,
    #[sea_orm(has_many = "super::collectives_subscribers::Entity")]
    CollectivesSubscribers,
    #[sea_orm(has_many = "super::encounters::Entity")]
    Encounters,
    #[sea_orm(has_many = "super::encounters_participants::Entity")]
    EncountersParticipants,
    #[sea_orm(has_many = "super::events::Entity")]
    Events,
    #[sea_orm(has_many = "super::lineups_subscribers::Entity")]
    LineupsSubscribers,
}

impl Related<super::collectives_subscribers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CollectivesSubscribers.def()
    }
}

impl Related<super::encounters_participants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EncountersParticipants.def()
    }
}

impl Related<super::events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Events.def()
    }
}

impl Related<super::lineups_subscribers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LineupsSubscribers.def()
    }
}

impl Related<super::collectives::Entity> for Entity {
    fn to() -> RelationDef {
        super::collectives_subscribers::Relation::Collectives.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::collectives_subscribers::Relation::Members
                .def()
                .rev(),
        )
    }
}

impl Related<super::encounters::Entity> for Entity {
    fn to() -> RelationDef {
        super::encounters_participants::Relation::Encounters.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::encounters_participants::Relation::Members
                .def()
                .rev(),
        )
    }
}

impl Related<super::lineups::Entity> for Entity {
    fn to() -> RelationDef {
        super::lineups_subscribers::Relation::Lineups.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::lineups_subscribers::Relation::Members.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
