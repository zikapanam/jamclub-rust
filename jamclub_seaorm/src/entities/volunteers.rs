//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::PublicationStatus;
use super::sea_orm_active_enums::VolunteerType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "volunteers")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub first_name: String,
    pub last_name: String,
    pub nick_name: Option<String>,
    pub gallery_url: Option<String>,
    pub volunteer_types: Vec<VolunteerType>,
    #[sea_orm(column_type = "Text", nullable)]
    pub notes: Option<String>,
    pub status: PublicationStatus,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::events_volunteers::Entity")]
    EventsVolunteers,
}

impl Related<super::events_volunteers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventsVolunteers.def()
    }
}

impl Related<super::events::Entity> for Entity {
    fn to() -> RelationDef {
        super::events_volunteers::Relation::Events.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::events_volunteers::Relation::Volunteers.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
