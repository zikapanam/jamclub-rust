//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::Community;
use super::sea_orm_active_enums::PublicationStatus;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "collectives")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub ref_airtable: Option<String>,
    pub organizer_id: i32,
    pub short_title: String,
    pub long_title: String,
    #[sea_orm(column_type = "Text")]
    pub presentation: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub notes: Option<String>,
    pub discord_role_id: Option<i64>,
    pub discord_channel_id: Option<i64>,
    pub discord_presentation_url: Option<String>,
    pub communities: Vec<Community>,
    pub status: PublicationStatus,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::collectives_subscribers::Entity")]
    CollectivesSubscribers,
    #[sea_orm(has_many = "super::encounters::Entity")]
    Encounters,
    #[sea_orm(has_many = "super::lineups::Entity")]
    Lineups,
    #[sea_orm(
        belongs_to = "super::members::Entity",
        from = "Column::OrganizerId",
        to = "super::members::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Members,
}

impl Related<super::collectives_subscribers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CollectivesSubscribers.def()
    }
}

impl Related<super::encounters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Encounters.def()
    }
}

impl Related<super::lineups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Lineups.def()
    }
}

impl Related<super::members::Entity> for Entity {
    fn to() -> RelationDef {
        super::collectives_subscribers::Relation::Members.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::collectives_subscribers::Relation::Collectives
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
