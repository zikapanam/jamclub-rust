//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::Community;
use super::sea_orm_active_enums::EncounterStatus;
use super::sea_orm_active_enums::EncounterType;
use super::sea_orm_active_enums::MusicGenre;
use super::sea_orm_active_enums::PlayedInstrument;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "encounters")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub organizer_id: i32,
    pub ref_airtable: Option<String>,
    pub short_title: String,
    pub long_title: String,
    #[sea_orm(column_type = "Text")]
    pub presentation: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub notes: Option<String>,
    pub played_instruments: Option<Vec<PlayedInstrument>>,
    pub music_genres: Option<Vec<MusicGenre>>,
    pub encounter_type: EncounterType,
    pub discord_url_message: Option<String>,
    pub discord_message_id: Option<i64>,
    pub discord_thread_id: Option<i64>,
    pub discord_channel_id: Option<i64>,
    pub communities: Vec<Community>,
    pub location_id: Option<i32>,
    pub collective_id: Option<i32>,
    pub status: EncounterStatus,
    pub start_date: DateTimeWithTimeZone,
    pub end_date: DateTimeWithTimeZone,
    pub reminder_done_14days_bef: Option<bool>,
    pub reminder_done_7days_bef: Option<bool>,
    pub reminder_done_2hours_bef: Option<bool>,
    pub registration_until_last_time: Option<bool>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::collectives::Entity",
        from = "Column::CollectiveId",
        to = "super::collectives::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Collectives,
    #[sea_orm(has_many = "super::encounters_participants::Entity")]
    EncountersParticipants,
    #[sea_orm(
        belongs_to = "super::locations::Entity",
        from = "Column::LocationId",
        to = "super::locations::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Locations,
    #[sea_orm(
        belongs_to = "super::members::Entity",
        from = "Column::OrganizerId",
        to = "super::members::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Members,
}

impl Related<super::collectives::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Collectives.def()
    }
}

impl Related<super::encounters_participants::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EncountersParticipants.def()
    }
}

impl Related<super::locations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Locations.def()
    }
}

impl Related<super::members::Entity> for Entity {
    fn to() -> RelationDef {
        super::encounters_participants::Relation::Members.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::encounters_participants::Relation::Encounters
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
