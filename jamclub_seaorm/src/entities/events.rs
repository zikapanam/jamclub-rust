//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::EventStatus;
use super::sea_orm_active_enums::EventType;
use super::sea_orm_active_enums::MusicGenre;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "events")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub ref_airtable: Option<String>,
    pub organizer_id: i32,
    pub title: String,
    #[sea_orm(column_type = "Text")]
    pub presentation: String,
    pub music_genres: Option<Vec<MusicGenre>>,
    pub event_types: Vec<EventType>,
    pub status: EventStatus,
    pub location_id: Option<i32>,
    #[sea_orm(column_name = "start-date")]
    pub start_date: DateTimeWithTimeZone,
    pub mobilizon_url: Option<String>,
    pub facebook_url: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::events_lineups::Entity")]
    EventsLineups,
    #[sea_orm(has_many = "super::events_volunteers::Entity")]
    EventsVolunteers,
    #[sea_orm(
        belongs_to = "super::locations::Entity",
        from = "Column::LocationId",
        to = "super::locations::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Locations,
    #[sea_orm(
        belongs_to = "super::members::Entity",
        from = "Column::OrganizerId",
        to = "super::members::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Members,
}

impl Related<super::events_lineups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventsLineups.def()
    }
}

impl Related<super::events_volunteers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::EventsVolunteers.def()
    }
}

impl Related<super::locations::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Locations.def()
    }
}

impl Related<super::members::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Members.def()
    }
}

impl Related<super::lineups::Entity> for Entity {
    fn to() -> RelationDef {
        super::events_lineups::Relation::Lineups.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::events_lineups::Relation::Events.def().rev())
    }
}

impl Related<super::volunteers::Entity> for Entity {
    fn to() -> RelationDef {
        super::events_volunteers::Relation::Volunteers.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::events_volunteers::Relation::Events.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
