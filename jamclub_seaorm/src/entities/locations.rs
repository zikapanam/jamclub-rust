//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use super::sea_orm_active_enums::LocationType;
use super::sea_orm_active_enums::PublicationStatus;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "locations")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub ref_airtable: Option<String>,
    pub short_title: String,
    pub long_title: String,
    pub email: Option<String>,
    pub phone_number: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub address: String,
    pub postal_code: i32,
    pub google_maps_url: String,
    pub latitude: Option<Decimal>,
    pub longitude: Option<Decimal>,
    #[sea_orm(column_type = "Text", nullable)]
    pub notes: Option<String>,
    pub status: PublicationStatus,
    pub location_types: Vec<LocationType>,
    pub created_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::encounters::Entity")]
    Encounters,
    #[sea_orm(has_many = "super::events::Entity")]
    Events,
}

impl Related<super::encounters::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Encounters.def()
    }
}

impl Related<super::events::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Events.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
